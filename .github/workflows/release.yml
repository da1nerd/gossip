name: Release Management

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: "Release type"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major
      publish_packages:
        description: "Publish packages to pub.dev"
        required: true
        default: true
        type: boolean
      create_release:
        description: "Create GitHub release"
        required: true
        default: true
        type: boolean

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Dart
        uses: dart-lang/setup-dart@v1
        with:
          sdk: stable

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable

      - name: Install Melos
        run: dart pub global activate melos

      - name: Bootstrap project
        run: melos bootstrap

      - name: Configure Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      - name: Run pre-release checks
        run: |
          echo "🔍 Running pre-release checks..."
          melos run analyze
          melos run test
          melos run format

      - name: Update versions
        id: version_update
        run: |
          echo "🔢 Updating all package versions to follow root version..."
          ./scripts/update_versions.sh ${{ github.event.inputs.release_type }}

      - name: Bootstrap after version update
        run: |
          echo "🔄 Re-bootstrapping project after version updates..."
          melos bootstrap

      - name: Run publish dry-run
        run: |
          echo "🧪 Testing package publishing..."
          melos run publish-dry-run

      - name: Commit version changes
        run: |
          git add .
          git commit -m "chore: release v${{ env.RELEASE_VERSION }}

          - Updated all package versions to ${{ env.RELEASE_VERSION }}
          - All packages now follow the root pubspec.yaml version

          [skip ci]"

      - name: Push changes
        run: git push origin main

      - name: Setup pub credentials
        if: ${{ github.event.inputs.publish_packages == 'true' }}
        run: |
          mkdir -p ~/.pub-cache
          echo '${{ secrets.PUB_CREDENTIALS }}' > ~/.pub-cache/credentials.json

      - name: Publish packages
        if: ${{ github.event.inputs.publish_packages == 'true' }}
        run: |
          echo "🚀 Publishing packages to pub.dev..."
          melos run publish-packages

      - name: Get package info
        id: package_info
        run: |
          echo "Collecting package information..."
          PACKAGE_LIST=""
          PACKAGE_COUNT=0

          for package_dir in packages/*/; do
            if [ -f "$package_dir/pubspec.yaml" ]; then
              package_name=$(basename "$package_dir")
              version=$(cd "$package_dir" && grep "^version:" pubspec.yaml | sed 's/version: //' | xargs)
              if [[ "$version" != "null" && -n "$version" ]]; then
                PACKAGE_LIST="$PACKAGE_LIST- **$package_name**: v$version\n"
                PACKAGE_COUNT=$((PACKAGE_COUNT + 1))
              fi
            fi
          done

          echo "PACKAGE_LIST<<EOF" >> $GITHUB_OUTPUT
          echo -e "$PACKAGE_LIST" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "PACKAGE_COUNT=$PACKAGE_COUNT" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        if: ${{ github.event.inputs.create_release == 'true' }}
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.RELEASE_VERSION }}
          release_name: Release v${{ env.RELEASE_VERSION }}
          body: |
            ## 🚀 Release v${{ env.RELEASE_VERSION }}

            This release includes ${{ steps.package_info.outputs.PACKAGE_COUNT }} packages, all synchronized to version **${{ env.RELEASE_VERSION }}**.

            ### 📦 Published Packages

            ${{ steps.package_info.outputs.PACKAGE_LIST }}

            ### 📱 App Changes

            - App versioning is handled separately by Codemagic for Play Store deployment

            ### 🔄 Version Management

            - ✅ All packages now follow the root `pubspec.yaml` version
            - ✅ Internal package dependencies updated to use consistent versions
            - ✅ Packages published to [pub.dev](https://pub.dev)

            ### 📚 Documentation

            - [Deployment Guide](./DEPLOYMENT.md)
            - [Package Documentation](./packages/)
            - [App Documentation](./apps/gossip_chat/)

            ---

            **Release Type**: ${{ github.event.inputs.release_type }}
            **Generated by**: GitHub Actions
            **Commit**: ${{ github.sha }}

            > **Note**: The app (`gossip_chat`) uses independent versioning for Play Store deployments via Codemagic, but follows the same base version number.
          draft: false
          prerelease: false

      - name: Create release summary
        run: |
          echo "## 🎉 Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Release Type**: ${{ github.event.inputs.release_type }}" >> $GITHUB_STEP_SUMMARY
          echo "**Package Version**: v${{ env.RELEASE_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "**Packages Updated**: ${{ steps.package_info.outputs.PACKAGE_COUNT }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Published Packages" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.package_info.outputs.PACKAGE_LIST }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎯 Key Changes" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ All packages now use synchronized versioning" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Root \`pubspec.yaml\` is the single source of truth for package versions" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Internal dependencies updated to use consistent versions" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ App version follows the same base version with independent build numbers" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ⚡ Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "1. ✅ Packages are published to pub.dev" >> $GITHUB_STEP_SUMMARY
          echo "2. 🔄 Codemagic will automatically deploy the app" >> $GITHUB_STEP_SUMMARY
          echo "3. 📱 Check Play Console for app release status" >> $GITHUB_STEP_SUMMARY
          echo "4. 📊 Monitor package downloads on pub.dev" >> $GITHUB_STEP_SUMMARY

      - name: Notify on failure
        if: failure()
        run: |
          echo "## ❌ Release Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The release process encountered an error. Please check the logs above." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔧 Troubleshooting" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "1. Check that all tests pass locally: \`melos run test\`" >> $GITHUB_STEP_SUMMARY
          echo "2. Verify version update script: \`./scripts/update_versions.sh patch\`" >> $GITHUB_STEP_SUMMARY
          echo "3. Ensure pub.dev credentials are valid" >> $GITHUB_STEP_SUMMARY
          echo "4. Check for any package dependency conflicts" >> $GITHUB_STEP_SUMMARY
          echo "5. Review the [Deployment Guide](./DEPLOYMENT.md)" >> $GITHUB_STEP_SUMMARY
