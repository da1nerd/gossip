name: Release Management

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: "Release type"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}

      - name: Setup Dart
        uses: dart-lang/setup-dart@v1
        with:
          sdk: stable

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable

      - name: Install dependencies
        run: dart pub get

      - name: Install Melos
        run: dart pub global activate melos

      - name: Bootstrap project
        run: melos bootstrap

      - name: Configure Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          # Use PAT if available for triggering other workflows
          if [ "${{ secrets.PAT_TOKEN }}" != "" ]; then
            echo "Using PAT token for git operations"
          else
            echo "Using GITHUB_TOKEN - publish workflow may not trigger automatically"
          fi

      - name: Run pre-release checks
        run: |
          echo "üîç Running pre-release checks..."
          melos run analyze
          melos run test
          melos run format

      - name: Update versions using Melos 7.x
        id: version_update
        run: |
          echo "üöÄ Updating versions with Melos automatic dependency management..."
          # Use --no-git to prevent automatic git operations
          melos version gossip ${{ github.event.inputs.release_type }} --yes --no-git-tag-version --no-git-commit-version

          # Get the new version for later steps
          NEW_VERSION=$(grep "^version:" packages/gossip/pubspec.yaml | sed 's/version: //' | xargs)
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "‚úÖ Updated to version $NEW_VERSION - ready to commit"

      - name: Commit version changes
        run: |
          echo "üìù Committing version changes..."
          git add .
          git commit -m "chore(release): publish packages v${{ env.NEW_VERSION }}"
          echo "‚úÖ Version changes committed"

      - name: Push version changes
        run: |
          echo "üì§ Pushing version changes to repository..."
          git push
          echo "‚úÖ Version changes pushed successfully"

      - name: Create and push tag
        run: |
          echo "üè∑Ô∏è Creating tag v${{ env.NEW_VERSION }}..."
          git tag -a "v${{ env.NEW_VERSION }}" -m "Release v${{ env.NEW_VERSION }}"
          git push origin "v${{ env.NEW_VERSION }}"
          echo "‚úÖ Tag v${{ env.NEW_VERSION }} created and pushed"

      - name: Verify version consistency
        run: |
          echo "üîç Verifying all packages have consistent dependency versions..."
          melos run publish-dry-run

      - name: Get package info
        id: package_info
        run: |
          echo "üì¶ Collecting package information..."
          PACKAGE_LIST=""
          PACKAGE_COUNT=0
          CHANGELOG_ENTRIES=""

          for package_dir in packages/*/; do
            if [ -f "$package_dir/pubspec.yaml" ]; then
              package_name=$(basename "$package_dir")
              version=$(cd "$package_dir" && grep "^version:" pubspec.yaml | sed 's/version: //' | xargs)
              if [[ "$version" != "null" && -n "$version" ]]; then
                PACKAGE_LIST="$PACKAGE_LIST- **$package_name**: v$version\n"
                PACKAGE_COUNT=$((PACKAGE_COUNT + 1))

                # Extract changelog entry for this version if it exists
                if [ -f "$package_dir/CHANGELOG.md" ]; then
                  changelog_entry=$(cd "$package_dir" && sed -n "/## $version/,/## /p" CHANGELOG.md | head -n -1 || true)
                  if [ -n "$changelog_entry" ]; then
                    CHANGELOG_ENTRIES="$CHANGELOG_ENTRIES\n### $package_name\n$changelog_entry\n"
                  fi
                fi
              fi
            fi
          done

          {
            echo "PACKAGE_LIST<<EOF"
            echo -e "$PACKAGE_LIST"
            echo "EOF"
            echo "PACKAGE_COUNT=$PACKAGE_COUNT"
            echo "CHANGELOG_ENTRIES<<EOF"
            echo -e "$CHANGELOG_ENTRIES"
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.NEW_VERSION }}
          release_name: Release v${{ env.NEW_VERSION }}
          body: |
            ## üöÄ Release v${{ env.NEW_VERSION }}

            This release includes ${{ steps.package_info.outputs.PACKAGE_COUNT }} packages with **automatic dependency synchronization** using Melos 7.x and pub workspaces.

            ### üì¶ Packages in this Release

            ${{ steps.package_info.outputs.PACKAGE_LIST }}

            ### üìù What's Changed

            ${{ steps.package_info.outputs.CHANGELOG_ENTRIES }}

            ### ‚ú® Version Management Features

            - ‚úÖ **Smart dependency management**: Melos 7.x automatically updated all package dependencies
            - ‚úÖ **Pub workspaces**: Single shared dependency resolution for consistent versions
            - ‚úÖ **Automatic changelog generation**: Generated from conventional commits
            - ‚úÖ **Automatic git tagging**: Git tag created automatically by Melos

            ### üì¶ Publishing

            Packages will be automatically published to pub.dev via the tag-triggered workflow.

            ### üì± App Deployment

            The gossip_chat app uses independent versioning managed by Codemagic for Play Store deployments.

            ### üîó Links

            - [View packages on pub.dev](https://pub.dev/publishers/da1nerd.dev)
            - [Deployment Guide](https://github.com/${{ github.repository }}/blob/main/DEPLOYMENT.md)
            - [Version Strategy](https://github.com/${{ github.repository }}/blob/main/VERSIONING.md)

            ---

            **Release Type**: ${{ github.event.inputs.release_type }}
            **Generated by**: GitHub Actions + Melos 7.x
            **Commit**: ${{ github.sha }}

            > **Powered by**: [Melos 7.x](https://melos.invertase.dev/) + [Pub Workspaces](https://dart.dev/tools/pub/workspaces) for modern monorepo management
          draft: false
          prerelease: false

      - name: Create release summary
        run: |
          echo "## üéâ Release v${{ env.NEW_VERSION }} Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìä Release Details" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Release Type**: ${{ github.event.inputs.release_type }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: v${{ env.NEW_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Packages**: ${{ steps.package_info.outputs.PACKAGE_COUNT }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Git Tag**: ‚úÖ Created automatically by Melos" >> $GITHUB_STEP_SUMMARY
          echo "- **GitHub Release**: ‚úÖ Created" >> $GITHUB_STEP_SUMMARY
          echo "- **Publishing**: ‚è≥ Will be triggered by tag event" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üì¶ Updated Packages" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.package_info.outputs.PACKAGE_LIST }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ‚ú® Melos 7.x Magic" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ **Zero manual coordination**: Single command updated all packages and dependencies" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ **Pub workspaces**: Shared dependency resolution prevents version conflicts" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ **Automatic changelogs**: Generated from commits and version changes" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ **Git integration**: Automatic commits and tags handled by Melos" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ **Separate publishing**: Tag-triggered workflow will publish to pub.dev" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîó Quick Links" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- [üè∑Ô∏è Release Tag](https://github.com/${{ github.repository }}/releases/tag/v${{ env.NEW_VERSION }})" >> $GITHUB_STEP_SUMMARY
          echo "- [üì¶ View on pub.dev](https://pub.dev/publishers/da1nerd.dev) (after publishing)" >> $GITHUB_STEP_SUMMARY
          echo "- [üîÑ Publishing Workflow](https://github.com/${{ github.repository }}/actions) (check for tag trigger)" >> $GITHUB_STEP_SUMMARY
          echo "- [üì± Codemagic Build](https://codemagic.io/apps)" >> $GITHUB_STEP_SUMMARY

      - name: Notify on failure
        if: failure()
        run: |
          echo "## ‚ùå Release Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The release process encountered an error. Here's how to troubleshoot:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîß Quick Fixes" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "1. **Test locally first**:" >> $GITHUB_STEP_SUMMARY
          echo "   \`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "   melos run version-${{ github.event.inputs.release_type }}" >> $GITHUB_STEP_SUMMARY
          echo "   melos run publish-dry-run" >> $GITHUB_STEP_SUMMARY
          echo "   \`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "2. **Verify workspace setup**: \`dart pub workspace list\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "3. **Check for tag creation**: Ensure git tag was created by Melos" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "4. **Manual recovery**:" >> $GITHUB_STEP_SUMMARY
          echo "   - If versioning succeeded, the tag should trigger publishing automatically" >> $GITHUB_STEP_SUMMARY
          echo "   - If partially versioned, commit the changes and re-run" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìö Documentation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- [Deployment Guide](https://github.com/${{ github.repository }}/blob/main/DEPLOYMENT.md)" >> $GITHUB_STEP_SUMMARY
          echo "- [Melos Documentation](https://melos.invertase.dev/)" >> $GITHUB_STEP_SUMMARY
          echo "- [Pub Workspaces Guide](https://dart.dev/tools/pub/workspaces)" >> $GITHUB_STEP_SUMMARY
